From b02be74a2eff8abc612ef84f30e0fbce6a7f65f5 Mon Sep 17 00:00:00 2001
From: Khem Raj <raj.khem@gmail.com>
Date: Fri, 4 Aug 2017 09:04:07 -0700
Subject: [PATCH] setup.py: Do not mix C and C++ compiler options

EXTRA_ENV_COMPILE_ARGS is used both with CC and CXX
so using -std=c++11 or -std=gnu99 together will cause
build time errors espcially with clang

error: invalid argument '-std=gnu99' not allowed with 'C++'

gcc7 ( defaults are -std=gnu11 and -std=gnu++14 )
 as well clang default to these standards mode or newer
anyway

Signed-off-by: Khem Raj <raj.khem@gmail.com>
---
 setup.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

--- a/setup.py
+++ b/setup.py
@@ -144,9 +144,10 @@ ENABLE_DOCUMENTATION_BUILD = os.environ.
 
 def check_linker_need_libatomic():
   """Test if linker on system needs libatomic."""
+  compiler, cc_args = os.environ.get('CC').split(' ', 1) or 'cc'
   code_test = (b'#include <atomic>\n' +
                b'int main() { return std::atomic<int64_t>{}; }')
-  cc_test = subprocess.Popen(['cc', '-x', 'c++', '-std=c++11', '-'],
+  cc_test = subprocess.Popen([compiler, cc_args, '-x', 'c++', '-std=c++11', '-'],
                              stdin=PIPE,
                              stdout=PIPE,
                              stderr=PIPE)
@@ -163,7 +164,7 @@ def check_linker_need_libatomic():
 EXTRA_ENV_COMPILE_ARGS = os.environ.get('GRPC_PYTHON_CFLAGS', None)
 EXTRA_ENV_LINK_ARGS = os.environ.get('GRPC_PYTHON_LDFLAGS', None)
 if EXTRA_ENV_COMPILE_ARGS is None:
-  EXTRA_ENV_COMPILE_ARGS = ' -std=c++11'
+  EXTRA_ENV_COMPILE_ARGS = ' '
   if 'win32' in sys.platform:
     if sys.version_info < (3, 5):
       EXTRA_ENV_COMPILE_ARGS += ' -D_hypot=hypot'
@@ -180,7 +181,7 @@ if EXTRA_ENV_COMPILE_ARGS is None:
       # available dynamically
       EXTRA_ENV_COMPILE_ARGS += ' /MT'
   elif "linux" in sys.platform:
-    EXTRA_ENV_COMPILE_ARGS += ' -std=gnu99 -fvisibility=hidden -fno-wrapv -fno-exceptions'
+    EXTRA_ENV_COMPILE_ARGS += ' -fvisibility=hidden -fno-wrapv -fno-exceptions'
   elif "darwin" in sys.platform:
     EXTRA_ENV_COMPILE_ARGS += ' -stdlib=libc++ -fvisibility=hidden -fno-wrapv -fno-exceptions'
 
--- a/src/python/grpcio/commands.py
+++ b/src/python/grpcio/commands.py
@@ -216,7 +216,8 @@ class BuildExt(build_ext.build_ext):
             when invoked in C mode. GCC is okay with this, while clang is not.
             """
             # TODO(lidiz) Remove the generated a.out for success tests.
-            cc_test = subprocess.Popen(['cc', '-x', 'c', '-std=c++11', '-'],
+            compiler, cc_args = os.environ.get('CC').split(' ', 1) or 'cc'
+            cc_test = subprocess.Popen([compiler, cc_args, '-x', 'c', '-std=c++11', '-'],
                                        stdin=subprocess.PIPE,
                                        stdout=subprocess.PIPE,
                                        stderr=subprocess.PIPE)
